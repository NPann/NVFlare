########
Overview
########

************
Introduction
************

NVFlare utilizes provisioning and admin client to reduce the amount of human coordination involved to set up a federated learning project
and provides an admin the ability to deploy the server and client configurations, start the server / clients, abort the training,
restart the training, and more. A provisioning tool can be configured to create one startup kit for each site in an encrypted package.
These packages can then be delivered to each site ready to go, streamlining the process to provision, start, and operate federated learning.

Provision - Start - Operate
===========================

Provision
---------
Lead IT generates the packages for the server / clients / admins, protected with passwords

Start
-----
Site IT each installs their own packages, starts the services, and maps the data location

Operate
-------
Lead scientists / administrators control the federated learning process: deploy application, check statuses, start / abort / shutdown training


******************************************************************************
Provision: Configure and generate packages for the server, clients, and admins
******************************************************************************

One party leads the process of configuring the provisioning tool and using it to generate startup kits for each party in
the federated learning training project:

Preparation for using the provisioning tool
===========================================

After installation ``NVFlare``, provisioning tool is available via ``provision`` command.

Provisioning a federated learning project
=========================================
The :ref:`user_guide/provisioning_tool:Provisioning tool` page has details on the contents of the
provisioning tool. Edit the :ref:`user_guide/provisioning_tool:Project yaml file` in the directory with the provisioning tool to meet your
project requirements, then run the startup kit with (here we assume your project.yml is in current working directory)::

    provision -p project.yml

A directory named "packages" containing each of the generated zip files is created where provision.py is run.
The console displays a list of zip files and their passwords. We suggest you copy the console output
and "packages" folder to a safe location. The passwords shown below are for demonstration purposes only::

    Project yaml file: /home/nvflare-venv/project.yml.
    ┏━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━┓
    ┃ participant           ┃ org    ┃ destination               ┃ password         ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━┩
    │ localhost             │ nvidia │ server.zip                │ Dby2BhwJdLKfStWl │
    │ org1-a                │ org1   │ org1-a.zip                │ BlLXFKgWp0Qu28cS │
    │ org1-b                │ org1   │ org1-b.zip                │ Lu6w0aCf1RhAqSlJ │
    │ org2                  │ org2   │ org2.zip                  │ KdotOafkUl2ziRh5 │
    │ org3                  │ org3   │ org3.zip                  │ t05cHjnd4WNSo62x │
    │ admin@nvidia.com      │ nvidia │ admin@nvidia.com.zip      │ eyTrthBudD7noW1s │
    │ researcher@nvidia.com │ nvidia │ researcher@nvidia.com.zip │ s52b8h9ToIRuALpx │
    │ researcher@org1.com   │ org1   │ researcher@org1.com.zip   │ dmlt3ySsAeU0V9F7 │
    │ researcher@org2.com   │ org2   │ researcher@org2.com.zip   │ GJS6eb410q0ijlCZ │
    │ it@org2.com           │ org2   │ it@org2.com.zip           │ s3lYvaL2tqX0Wrjb │
    └───────────────────────┴────────┴───────────────────────────┴──────────────────┘

.. tip:: You can run ``provision -n -p project.yml`` to generate zip files without password protection.

.. tip:: For security reasons, it is recommended to send the password to each participant separately from the package itself.

After generating packages: Distribute and extract
=================================================
Please let each participant know that the packages are password protected. In Ubuntu, the following command can be used
to extract the packages::

    unzip -P $PASSWORD $ZIP_FILE -d $DIRECTORY_TO_EXTRACT_TO

Using ``-d $DIRECTORY_TO_EXTRACT_TO`` is optional, and without it, a "startup" folder will be extracted to the current
directory the package is in. Either way, the parent folder containing this "startup" folder (*$DIRECTORY_TO_EXTRACT_TO*
if the ``-d`` option was used) will be the server, client, or admin client workspace root directory, and the party
running the package will need write access there.

.. note::

   It is important that this "startup" folder is not renamed because the code relies upon this for operation. Please
   note that a "transfer" directory and deployed applications will be created at the level of this "startup" folder. See the
   section on `Internal folder and file structures for NVFlare`_ below for more details.

************************************************************************************
Start: Instructions for each participant to start running FL with their startup kits
************************************************************************************

.. attention:: Please always safeguard .key files!

Federated learning server (server.zip)
======================================
One single server will coordinate the federated learning training and be the main hub all clients and administrator
clients connect to.

After unzipping the package server.zip, run the start.sh file from the "startup" folder you unzipped to start the server.

The rootCA.pem file is pointed to by "ssl_root_cert" in fed_server.json.  If you plan to move/copy it to a different place,
you will need to modify fed_server.json.  The same applies to the other two files, server.crt and server.key.

.. note::

   When launching the FL server inside a docker with ``docker run``, use ``--net=host`` to map hostname into that
   docker instance.  In secure gRPC, FL server has to bind the hostname specified in the provisioning stage.
   Always make sure that hostname is what FL server can bind to. Additionally,
   the port that the server communicates on must also not be blocked by any firewalls.

If clients from other machines cannot connect to the server, make sure that the host name specified when generating
the startup kits in the provisioning process resolves to the correct IP. In ubuntu, an entry may need to be added to
/etc/hosts with the IP and the host name.

Federated learning client ($CLIENT_NAME.zip)
============================================
Each site participating in federated learning training is a client. Each package for a client is named after the client
name specified when provisioning the project.

After unzipping the package (for details see `After generating packages: Distribute and extract`_), run ``start.sh``
from the "startup" folder you unzipped to start the client.

.. tip::

   You need to first install NVFlare package before running the ``start.sh`` shell script.  NVFlare is available
   on PyPi and can be installed with ``python3 -m pip install nvflare``.

   Depending on the deployed application which shall start later, your environment may need some additional
   Python packages.  If you haven't installed them, do it after you install NVFlare.  NVFlare does not dictate
   your deep learning environments.  It's completely up to you to set it up.

.. note::

    Coordination for where to mount the data may be needed depending on where the dataset is located in the application to be deployed.

The rootCA.pem file is pointed to by "ssl_root_cert" in fed_client.json.  If you plan to move/copy it to a different place,
you will need to modify fed_client.json.  The same applies to the other two files, client.crt and client.key.

The client name in your submission to participate this federated learning project is embedded in the CN field of client
certificate, which uniquely identifies the participant. As such, please safeguard its private key, client.key.

When a client successfully connects to the FL server, the server and that client will both log a token confirming that
the client successfully connected:

Server::

    2020-07-07 03:48:49,712 - ClientManager - INFO - Client: New client abcd@127.0.0.1 joined. Sent token: f279157b-df8c-aa1b-8560-2c43efa257bc.  Total clients: 1

Client::

    2020-07-07 03:48:49,713 - FederatedClient - INFO - Successfully registered client:abcd for exampletraining. Got token:f279157b-df8c-aa1b-8560-2c43efa257bc

If a connection cannot be made, the client will repeatedly try to connect and for each failure log::

    Could not connect to server. Setting flag for stopping training. failed to connect to all addresses

If the server is up, you may need to troubleshoot with settings for firewall ports to make sure that the proper
permissions are in place. This could require coordination between the lead IT and site IT personnel.

Federated learning administration client ($EMAIL.zip)
=====================================================
Each admin client will be able to connect and submit commands to the server. Each admin client package is named after
the email specified when provisioning the project, and the same email will need to be entered for authentication when
the admin client is launched.

Install the wheel package first with::

    python3 -m pip install nvflare


After installation, you can run the **fl_admin.sh** file to start communicating to the FL server.
The FL server must be running and there must be a successful connection between the admin
client and the FL server in order for the admin client to start. For the prompt **User Name:**, enter the email that was
used for that admin client in the provisioning of the project.

The rootCA.pem file is pointed to by "ca_cert" in fl_admin.sh.  If you plan to move/copy it to a different place,
you will need to modify the corresponding script.  The same applies to the other two files, client.crt and client.key.

The email to participate this FL project is embedded in the CN field of client certificate, which uniquely identifies
the participant. As such, please safeguard its private key, client.key.

.. attention::

   You will need write access in the directory containing the "startup" folder because the "transfer" directory for
   uploading files as well as directories created for federated learning runs will live here. For details, see
   `Internal folder and file structures for NVFlare`_.

*******************************************************
Operate: Running federated learning as an administrator
*******************************************************

Example of running federated learning from the administration client
====================================================================
With all connections between the FL server, FL clients, and administration clients open and all of the parties
started successfully as described in the preceding section, `Federated learning administration client ($EMAIL.zip)`_,
the following is an example of a series of admin commands and their outputs to operate a federated learning project.

For a complete list of admin commands, see :ref:`user_guide/admin_commands:Administrator commands`.

Check status of FL server and FL client
---------------------------------------

.. code-block:: console

    > check_status server
    FL run number has not been set.
    FL server status: training not started
    Registered clients: 2
    client name:flclient1   instance name:flclient1	token: 53b6f87a-79f0-4127-9735-72051de2dad9
    client name:flclient2	instance name:flclient2	token: b37644d4-7910-4a11-adf9-14cd790c1151

    Done [9325 usecs] 2020-07-07 16:31:15.175153

    > check_status client
    instance:flclient1 : client name: flclient1	token: 53b6f87a-79f0-4127-9735-72051de2dad9	status: training not started
    instance:flclient2 : client name: flclient2	token: b37644d4-7910-4a11-adf9-14cd790c1151	status: training not started

    Done [308172 usecs] 2020-07-07 16:31:27.300195

The two commands above are not necessary, but check the status of the server and clients to confirm that they are registered
and that the FL server and FL client statuses are all "training not started".

Please note that in the status of the server above, FL run number has not been set. Let us set a new run number next:

Set run number for FL training
------------------------------

.. code-block:: console

    > set_run_number 123
    Create a new run folder: run_123
    Done [8810 usecs] 2020-07-07 17:05:05.145405

The FL run number is critical to starting and managing FL training projects because all training happens within a run.

.. attention::

    You must not start a new run before the previous run is finished completely.

.. attention::

    We suggest restarting the server if you are running different applications so that the previously imported codes
    will not affect the new application.

After setting a run number, a folder for that run is created on the server under the root of the server's workspace at
the same level as the startup directory (see the section on `Internal folder and file structures for NVFlare`_
below for more details). Initially, this folder will be empty when created for a new run.

In order to start training for a federated learning project, an application with the proper configurations needs to
be uploaded and deployed to the server and all the participating clients.

Upload application from admin client to FL server
-------------------------------------------------

.. code-block:: console

    > upload_app segmentation_ct_spleen
    Created folder /path_on_server/fl_server_workspace_root/startup/../transfer/segmentation_ct_spleen
    Done [962809 usecs] 2020-07-07 17:16:09.947498

The admin command ``upload_app`` uploads an application from the administrator's machine's transfer directory to the
server's transfer directory (both at the same level as their respective startup directories).  The administrator
can run ``upload_app`` either before or after ``set_run_number`` but in order to deploy the application for the next step,
a run number must be set:

Deploy application from transfer directory of FL server to active run on server and client
------------------------------------------------------------------------------------------

.. code-block:: console

    > deploy_app segmentation_ct_spleen server
    mmar_server has been deployed.
    Done [14036 usecs] 2020-07-07 17:27:21.365732

    > deploy_app segmentation_ct_spleen client
    instance:flclient1 : MMAR deployed.
    instance:flclient2 : MMAR deployed.

    Done [521724 usecs] 2020-07-07 17:27:28.337640

The two commands above deployed the specified application that had already been uploaded to the server's transfer directory into
directories corresponding to the run number. In this case, since the run number was set to 123, the segmentation_ct_spleen
application was copied into the run_123 directory on the FL server and FL clients
(see the section on `Internal folder and file structures for NVFlare`_ below for a more visual representation).

.. note::

   The first command deployed the application to the FL server, and the second command deployed the application to all active
   FL clients. You can also choose to deploy an application to a specific client by specifying the client instance name after
   the command, for example, the following would only deploy the application to flclient1: deploy_app segmentation_ct_spleen client flclient1

After the application is deployed to the FL server and participating FL clients, training can be started:

Start training by starting FL server and FL clients
---------------------------------------------------

.. code-block:: console

    > start_app server
    Server training is starting....
    Done [13004 usecs] 2020-07-07 13:27:37.325887

    > start_app client
    instance:flclient1 : Starting the client...
    instance:flclient2 : Starting the client...

    Done [210790 usecs] 2020-07-07 13:27:46.968446

The server status should proceed from "training not started" to "training starting" then to "training started", and this
can be checked with the command ``check_status server``. The clients should begin training after the server is in the
"training started" status.

.. note::

   The command ``start_mgpu client <gpu number> <client name>`` can be used to start multiple GPU federated learning
   training on clients. Please refer to :ref:`multi-gpu training <multi gpu training>`.

Stopping federated learning training
------------------------------------
Do not use ctrl-c to stop the FL server or FL clients, as there are known issues that can leave clients in a state where
they are stuck and unable to communicate with the FL server. Instead the following command can be used to abort a client
to stop training

.. code-block:: console

    > abort client flclient1
    instance:flclient1 : Aborting the client...

    Done [511128 usecs] 2020-07-08 13:28:32.235777

You can also use ``abort client`` to stop training on all clients. Please note that abort will not work unless the client
has already successfully started training.

.. note:: The "Done" displayed on the admin client is referring to the message sending being done. The actual completion
   of aborting the client may occur after some slight delay.

To then shut down the client entirely and end the FL client process

.. code-block:: console

    > shutdown client flclient1
    Are you sure (Y/N): Y
    instance:flclient1 : Shutdown the client...

    Done [272239 usecs] 2020-07-08 13:33:31.377445

The ``shutdown client`` command can also be issued without a specific client to shut down all clients, and this command
requires the administrator to enter "Y" for confirmation.

Both ``abort`` and ``shutdown`` can be used to stop training and end the FL server process as well, with ``abort server``
and ``shutdown server``. Please note that you should shut down the clients before the server because the clients receive
commands through the server. If a client refuses to die, wait the duration of the heartbeat to see if it gets dropped,
then after all clients are shut down, you can shut down the server. If a client still refuses to die, IT personnel at
the site may have to kill it.

***********************************************
Internal folder and file structures for NVFlare
***********************************************

Server side folder and file structure
=====================================
::

    /some_path_on_fl_server/fl_server_workspace_root/
        admin_audit.log
        log.txt
        startup/
            authorization.json
            fed_server.json
            log.config
            readme.txt
            rootCA.pem
            server_context.tenseal
            server.crt
            server.key
            signature.pkl
            start.sh
            stop_fl.sh
            sub_start.sh
        transfer/
        run_1/
            mmar_server/
                config/
                models/
                resources/
            mmar_client1/
                config/
                models/
                resources/
            mmar_client2/
                config/
                models/
                resources/
            ...
            cross_validation/
        run_2/
            ......

Client side folder and file structure
=====================================
::

    /some_path_on_fl_client/fl_client_workspace_root/
        log.txt
        startup/
            client_context.tenseal
            client.crt
            client.key
            fed_client.json
            log.config
            readme.txt
            rootCA.pem
            signature.pkl
            start.sh
            stop_fl.sh
            sub_start.sh
        transfer/
        run_1/
            mmar_client1/
                config/
                cross_validation/
                models/
                resources/
        run_2/
            mmar_client1/
                config/
                cross_validation/
                models/
                resources/
        run_3/
            ......

Administrator side folder and file structure
============================================
::

    /some_path_on_fl_admin/fl_administrator_workspace_root/
        startup/
            client.crt
            client.key
            fl_admin.sh
            readme.txt
            rootCA.pem
            signature.pkl
        transfer/
            application_for_uploading/
                config/
                models/
                resources/
            application2_for_uploading/
                config/
                models/
                resources/

************
Known issues
************

#. If server dies and then is restarted, intentionally or unintentionally, all clients will have to be restarted.
#. Running out of memory can happen at any time, especially if the server and clients are running on same machine.
   This can cause the server to die unexpectedly.
#. Putting applications in the transfer folders without using the upload_app command or forgetting to delete the models
   folder inside, a mysterious error may occur when running the deploy_app command because the application folder is too
   large to be uploaded and that causes timeout.
#. Please don't start a new training run or start a new app before the previous application is fully stopped. If
   cross-site validation is enabled, please wait until it ends. Or users can do ``abort client`` and
   ``abort server`` before they ``start_app`` for the new run.
